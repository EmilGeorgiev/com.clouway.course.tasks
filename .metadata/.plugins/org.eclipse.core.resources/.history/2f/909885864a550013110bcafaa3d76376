package heterogeneoustree;

import java.util.ArrayList;

import javax.naming.spi.DirStateFactory.Result;
import javax.print.attribute.standard.MediaSize.Other;

@SuppressWarnings("hiding")
public class HeterogeneousTree<Object> {

	public static class TreeNode<Object> {
		// Contains the value of the node
		private Object value;

		// Shows whether the current node has parent
		private boolean hasParent;

		// Contains the children of the node
		private ArrayList<TreeNode<Object>> children;

		/**
		 * Constructs a tree node.
		 * 
		 * @param value
		 *            - the value of the node.
		 */
		public TreeNode(Object value) {
			if (value == null) {
				throw new IllegalArgumentException("Cannot insert null value!");
			}
			this.value = value;
			this.children = new ArrayList<TreeNode<Object>>();
		}

		/**
		 * @return the value of the node.
		 */
		public Object getValue() {
			return this.value;
		}

		/**
		 * Sets the value of the node.
		 * 
		 * @param value
		 *            - the value to be set.
		 */
		public void setValue(Object value) {
			this.value = value;
		}

		/**
		 * Adds child to the node.
		 * 
		 * @param child
		 *            - the child to be added.
		 */
		public void addChild(TreeNode<Object> child) {
			if (child == null) {
				throw new IllegalArgumentException("Cannot insert null value!");
			}

			if (child.hasParent) {
				throw new IllegalArgumentException(
						"The node already has a parent!");
			}

			child.hasParent = true;
			this.children.add(child);
		}

		/**
		 * Gets the child of the node at given index.
		 * 
		 * @param index
		 *            - the index of the desired child.
		 * @return the child on the given position.
		 */
		public TreeNode<Object> getChild(int index) {
			return this.children.get(index);
		}

		/**
		 * @return the number of node's children.
		 */
		public int getChildrenCount() {
			return this.children.size();
		}
	}

	// The root of the tree
	private TreeNode<Object> root;

	/**
	 * Constructs the tree.
	 * 
	 * @param value
	 *            - the value of the node.
	 */
	public HeterogeneousTree(Object value) {
		if (value == null) {
			throw new IllegalArgumentException("Cannot insert null value!");
		}

		this.root = new TreeNode<Object>(value);
	}

	/**
	 * Constructs the tree.
	 * 
	 * @param value
	 *            - the value of the root node.
	 * @param children
	 *            - the children of the root node.
	 */
	@SuppressWarnings("unchecked")
	public HeterogeneousTree(Object value,
			HeterogeneousTree<Object>... children) {
		this(value);

		for (HeterogeneousTree<Object> child : children) {
			this.root.addChild(child.root);
		}
	}

	/**
	 * @return the root node or null if the tree is empty.
	 */
	public TreeNode<Object> getRoot() {
		return this.root;
	}

	/**
	 * @return the child nodes of the tree.
	 */
	public ArrayList<TreeNode<Object>> getChildNodes() {
		if (this.root != null) {
			return this.root.children;
		}
		return new ArrayList<TreeNode<Object>>();
	}

	public void addNode(Object value, Object parentValue) {
		TreeNode<Object> child = new TreeNode<Object>(value);
		TreeNode<Object> parent = getTreeNode(parentValue, root);
		parent.addChild(child);
	}

	private TreeNode<Object> getTreeNode(Object value, TreeNode<Object> root) {
		if (value == null && root == null) {
			throw new IllegalArgumentException("Invalid argument");
		}
		TreeNode<Object> result = null;
		if (value.equals(root.value)) {
			result = root;
			return result;
		} else {
			for (TreeNode<Object> treeNode : root.children) {
				getTreeNode(value, treeNode);
			}
		}
		return result;
	}

	private void printDFS(TreeNode<Object> root, String spaces) {
		if (this.root == null) {
			return;
		}

		System.out.println(spaces + root.getValue());

		TreeNode<Object> child = null;
		for (int i = 0; i < root.getChildrenCount(); i++) {
			child = root.getChild(i);
			printDFS(child, spaces + "   ");
		}
	}

	/**
	 * Traverses and prints the tree in Depth First Search (DFS) manner.
	 */
	public void printDFS() {
		this.printDFS(this.root, new String());
	}
}